using Employee_MVC_v2._0.Models;
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;

namespace Employee_MVC_v2._0.Controllers
{
    public class EmployeesController : Controller
    {
        [HttpGet]
        public ActionResult Login()
        {
            return View(new Login());
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Login(Login obj)
        {
            //Checking the Creds from Login page
            if (obj.Email.Equals("admin@gmail.com") && obj.Password.Equals("admin"))
            {
                //Converting the Object to String of Json Format for transferring in Session
                string str = JsonSerializer.Serialize(obj);
                
                //Using Session to set String 
                //We can only store string and int in session
                HttpContext.Session.SetString("loggedUser", str);

                return RedirectToAction("Index");
            }
            ViewBag.failed = "Authentication Failed! Try Again";
            return View();
        }


        [HttpGet]   //Optional Attribute
        /* GET: EmployeesController
         *
         *  We need to create the View Layer for Index, to do by Scaffolding which will generate the Code according to
         *  our Model class - Employee
         *  Right Click on the method name and select Add View -> Razor View(Non-Empty) -> Select the desired Skeleton
         *  for Index -> List, which will generate the code for Listing all the Employees
         *  -> Select the Model Class for which the lisiting should be done, then the MS will automatically generate the Razor View
         *  Code for the Employee Class using it's property
         */
        public ActionResult Index()
        {
            List<Employee> empList = new List<Employee>();
            try
            {
                //Fetching the Object from session as a string, its in JSON format
                string? str = HttpContext.Session.GetString("loggedUser");
                
                //If the object does not exists, that means user has not passed the login phase and directly accessing the Page 
                if(str == null)
                    return RedirectToAction("Login");

                //Converting the Json Format to our Login Model Object
                Login obj = (Login)JsonSerializer.Deserialize(str!, typeof(Login))!;

                //storing the name in ViewBag
                ViewBag.name = obj.Email;

                //Populating the List of Employees from the Database
                empList = Employee.EmpList();    

            }catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            //Here we can send any Object related to out Model in the View Layer,
            //then in View we can use this list to print employees
            return View(empList);
        }

        
        /*  GET: EmployeesController/Details/id
         *  This is the Details call Handling method, and it's View is generated by Scaffolding, just the difference is
         *  We need to select Details as the Skeleton of the Razor View, so that MS will automatically write the code 
         *  for printing the data of the Single Employee by ID
         *  
         *  The ID sent in the URL can be directly fetched by writing the Parameter of the method same as the name given in
         *  MapAttribute in main file
         *  
         *  Though the ID is kept optional, but details will always require ID to show the specific Employee Info
         */
        public ActionResult Details(int id)
        {
            //Getting the Employee by it's ID from the Database
            Employee employeeObj = Employee.GetEmployeeById(id);
            //Sending the Employee Object as Model to
            return View(employeeObj);
        }

        

        /*  GET: EmployeesController/Create
         *  
         *  There are 2 Create Methods
         *  1. First for showing the View of Create View, where we will take the input to add the Employee
         *  2. To Process the Information and Persist the Employee in Database, whose info send from View of 1. Create
         *  
         *  So the view Layer for this Layer is also created by Scaffolding where skeleton is Create
         *  It will automatically assign the Name and input tags using the Model Class
         *  
         */
        public ActionResult Create()
        {
            return View();
        }

        /*  POST: EmployeesController/Create
         *  
         *  This Create will receive the Data send from the above Create View Layer
         *  The data is send as POST, so data will be hidden while sending and to receive the Post data
         *  in the method, there are two ways
         *  Either by the Object or By the IFormCollection class which stores all the Informating according to the
         *  Name of the attribute in Razor View we have given.
         *  Object of Employee will automatically be Populated, if the Name of the attributes and Property of class are same.
         *
         *  KNOWN AS MODEL BINDING
         *
         *Mandatory for Post methods*/
        [HttpPost] 
        [ValidateAntiForgeryToken]
        public ActionResult Create(Employee empObj)//IFormCollection collection)
        {
            try
            {
                //string s = (string)collection["Name"];
                Employee.AddEmployee(empObj);
                //Redirection of User to the Index View Layer
                return RedirectToAction("Index");
            }
            catch(Exception ex)
            {
                ViewBag.message = ex.Message;
                return View();
            }
        }

        
        
        
        // GET: EmployeesController/Edit/id
        //This is same as the First Create Method which takes the ID and returns the Employee
        //Edit View layer also created using Scaffolding, skeleton -> Edit
        public ActionResult Edit(int id)
        {
            Employee employeeObj = Employee.GetEmployeeById(id);
            return View(employeeObj);
        }

        // POST: EmployeesController/Edit/id
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Employee objEmp)
        {
            try
            {
                Employee.UpdateEmployee(objEmp);
                return RedirectToAction(nameof(Index));
            }
            catch
            {
                return View();
            }
        }

        
        
        
        // GET: EmployeesController/Delete/id
        public ActionResult Delete(int id)
        {
            Employee employeeObj = Employee.GetEmployeeById(id);
            return View(employeeObj);
        }

        // POST: EmployeesController/Delete/id
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(int id, IFormCollection collection)
        {
            try
            {
                Employee.DeleteEmployee(id);
                return RedirectToAction(nameof(Index));
            }
            catch
            {
                return View();
            }
        }


    }
}
